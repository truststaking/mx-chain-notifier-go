[General]
    # ExternalMarshaller is used for handling incoming/outcoming api requests 
    [General.ExternalMarshaller]
        Type = "json"
    # InternalMarshaller is used for handling internal structs
    # This has to be mapped with the internal marshalling used for notifier outport driver
    [General.InternalMarshaller]
        Type = "json"

    # Address pubkey converter config options
    [General.AddressConverter]
        Type = "bech32"
        Prefix = "erd"
        Length = 32

    # CheckDuplicates signals if the events received from observers have been already pushed to clients
    # Requires a redis instance/cluster and should be used when multiple observers push from the same shard
    CheckDuplicates = true

[WebSocketConnector]
    # Enabled will determine if websocket connector will be enabled or not
    Enabled = false

    # URL for the WebSocket client/server connection
    # This value represents the IP address and port number that the WebSocket client or server will use to establish a connection.
    URL = "localhost:22111"

    # This flag describes the mode to start the WebSocket connector. Can be "client" or "server"
    Mode = "server"

    # Possible values: json, gogo protobuf. Should be compatible with mx-chain-node outport driver config
    DataMarshallerType = "gogo protobuf"

    # Retry duration (receive/send ack signal) in seconds
    RetryDurationInSec = 5

    # Signals if in case of data payload processing error, we should send the ack signal or not
    BlockingAckOnError = false

    # After a message will be sent it will wait for an ack message if this flag is enabled
    WithAcknowledge = true

    # The duration in seconds to wait for an acknowledgment message, after this time passes an error will be returned
    AcknowledgeTimeoutInSec = 60

[ConnectorApi]
    # Enabled will determine if http connector will be enabled or not
    Enabled = true

    # The address on which the events notifier listens for subscriptions
    # It can be specified as "localhost:5000" or only as "5000"
    Host = "5000"

    # Username and Password needed to authorize the connector
    # BasicAuth is enabled only for the endpoints with "Auth" flag enabled
    # in api.toml config file 
    Username = ""
    Password = ""

[Redis]
    # The url used to connect to a pubsub server
    Url = "redis://localhost:6379/0"

    # The master name for failover client
    MasterName = "mymaster"

    # The sentinel url for failover client
    SentinelUrl = "localhost:26379"

    # The redis connection type. Options: | instance | sentinel |
    # instance - it will try to connect to a single redis instance
    # sentinel - it will try to connect to redis setup with master, slave and sentinel instances
    ConnectionType = "sentinel"

    # Time to live (in minutes) for redis lock entry
    TTL = 30

[RabbitMQ]
    # The url used to connect to a rabbitMQ server
    # Note: not required for running in the notifier mode
    Url = "amqp://guest:guest@localhost:5672"

    # The exchange which holds all logs and events
    [RabbitMQ.EventsExchange]
        Name = "all_events"
        Type = "fanout"

    # The exchange which holds revert events
    [RabbitMQ.RevertEventsExchange]
        Name = "revert_events"
        Type = "fanout"

    # The exchange which holds finalized block events
    [RabbitMQ.FinalizedEventsExchange]
        Name = "finalized_events"
        Type = "fanout"

    # The exchange which holds block txs events
    [RabbitMQ.BlockTxsExchange]
        Name = "block_txs"
        Type = "fanout"

    # The exchange which holds block scrs events
    [RabbitMQ.BlockScrsExchange]
        Name = "block_scrs"
        Type = "fanout"

    # The exchange which holds block events with additional info
    [RabbitMQ.BlockEventsExchange]
        Name = "block_events"
        Type = "fanout"

[AzureServiceBus]
    # ServiceBusConnectionString is the connection string for the ServiceBus instance
    ServiceBusConnectionString = ''

        # The exchange which holds all logs and events
    [AzureServiceBus.EventsExchange]
        Topic = "all_events"
        Enabled = true

    # The exchange which holds revert events
    [AzureServiceBus.RevertEventsExchange]
        Topic = "revert_events"
        Enabled = true

    # The exchange which holds finalized block events
    [AzureServiceBus.FinalizedEventsExchange]
        Topic = "finalized_events"
        Enabled = true

    # The exchange which holds block txs events
    [AzureServiceBus.BlockTxsExchange]
        Topic = "block_txs"
        Enabled = true

    # The exchange which holds block scrs events
    [AzureServiceBus.BlockScrsExchange]
        Topic = "block_scrs"
        Enabled = true

    # The exchange which holds block events with additional info
    [AzureServiceBus.BlockEventsExchange]
        Topic = "block_events"
        Enabled = true

[AzureKeyVault]
    # If enabled, the notifier will use Azure KeyVault to retrieve secrets for all non empty values in the config
    Enabled = true

    # KeyVault is the name of the Azure KeyVault that holds the secrets
    KeyVaultUrl = "https://{replace_this}.vault.azure.net/"

    # KeyVaultApiUsername is the name of the secret in the KeyVault that holds the username for the ConnectorApi
    KeyVaultApiUsername = 'SquadNotifierUsername'
    # KeyVaultApiPassword is the name of the secret in the KeyVault that holds the password for the ConnectorApiUsername
    KeyVaultApiPassword = 'SquadNotifierPassword'    
    # KeyVaultRabbitMQUrl is the name of the secret in the KeyVault that holds the connection string (URL) for the RabbitMQ instance
    KeyVaultRabbitMQ = 'RabbitMqConnectionString'
    # KeyVaultServiceBusUrl is the name of the secret in the KeyVault that holds the connection string for the ServiceBus instance
    KeyVaultServiceBus = 'ServiceBusConnectionString'
    # KeyVaultRedisUrl is the name of the secret in the KeyVault that holds the url for the Redis instance
    KeyVaultRedisUrl = 'NotifierRedisURL'
